package com.hornnes.bookdetails.controllers;

import com.hornnes.bookdetails.model.Book;
import com.hornnes.bookdetails.repository.LibraryRepository;
import graphql.schema.DataFetcher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
import java.util.Map;

@Controller // This means that this class is a Controller
@RequestMapping(path="/library")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LibraryRepository libraryRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String name,
            @RequestParam String author,
            @RequestParam Double userRating,
            @RequestParam Integer reviews,
            @RequestParam Integer price,
            @RequestParam String year,
            @RequestParam String genre) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Book book = new Book();
        book.setName(name);
        book.setAuthor(author);
        book.setUserRating(userRating);
        book.setReviews(reviews);
        book.setPrice(price);
        book.setYear(year);
        book.setGenre(genre);
        libraryRepository.save(book);
        return "Book successfully added";
    }

    // For restful API
    @GetMapping(path="/allBooks")
    public @ResponseBody Iterable<Book> getAllBooks() {
        // This returns a JSON or XML with the users
        return libraryRepository.findAll();
    }

    // For GraphQL
    // A data fetcher is responsible for returning a data value back for a given graphql field
    public DataFetcher getAllBooksFetcher() {
        return dataFetchingEnvironment -> libraryRepository.findAll();
    }

    public DataFetcher getBookByIdDataFetcher() {
        return dataFetchingEnvironment -> {
            // Gets the argument
            Integer bookId = Integer.parseInt(dataFetchingEnvironment.getArgument("id"));
            return libraryRepository.findById(bookId);
        };
    }

    public DataFetcher addBook () {
        return dataFetchingEnvironment -> {
            // Gets the argument
            Map arguments = dataFetchingEnvironment.getArguments();

            Book book = new Book();
            book.setName((String) arguments.getOrDefault("name", null));
            book.setAuthor((String) arguments.getOrDefault("author", null));
            book.setUserRating((Double) arguments.getOrDefault("userRating", null));
            book.setReviews((Integer) arguments.getOrDefault("reviews", null));
            book.setPrice((Integer) arguments.getOrDefault("price", null));
            book.setYear((String) arguments.getOrDefault("year", null));
            book.setGenre((String) arguments.getOrDefault("genre", null));
            libraryRepository.save(book);

            // TODO: Send error messsage if not successsfull
            return book;
        };
    }
}